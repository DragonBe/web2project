<?php
	class CConfigure {
		private $config_options = array();
		private $config_file = null;
		private $config_key = null;
		public $AppUI = null;
		
		public function &getConfigOptions() {
			return $this->config_options;
		}
			
		protected function _setConfigOptions($config) {
			$this->config_options = $config;
		}
		
		public function getConfigFile() {
			return $this->config_file;
		}
			
		protected function _setConfigFile($configFile) {
			$this->config_file = $configFile;
		}
		
		public function getConfigKey() {
			return $this->config_key;
		}
			
		protected function _setConfigKey($configKey) {
			$this->config_key = $configKey;
		}
		
		public function saveConfig($post) {
			if (is_writable($this->getConfigFile())) {
				if (!$handle = fopen($this->getConfigFile(), 'w')) {
					$this->AppUI->setMsg($this->getConfigFile()." ".$this->AppUI->_('cannot be opened.'), UI_MSG_ERROR);
					return false;
				}
		
				if (fwrite($handle, "<?php //Do not edit this file by hand, it will be overwritten by the configuration utility. \n") === FALSE) {
					$this->AppUI->setMsg($this->getConfigFile()." ".$this->AppUI->_('cannot be written to.'), UI_MSG_ERROR);
					return false;
				} 
				else {
					$co = $this->getConfigOptions();
					
					foreach ($co as $key => $value){
						if (substr($key, 0, 7) == 'heading') {
							continue;
						}
						
						$val='';
						switch($value['type']){
							case 'checkbox': 
								$val = isset($post[$key])?'1':'0';
								break;
							case 'text': 
								$val = isset($post[$key])?$post[$key]:'';
								break;
							case 'longtext':
								$val = isset($post[$key])?$post[$key]:'';
								break;
								case 'select': 
								$val = isset($post[$key])?$post[$key]:'0';
								break;
							case 'radio':
								$val = $post[$key];
								break;
							case 'auto': 
								$val = isset($post[$key])?$post[$key]:'';
								break;
							default:
								break;
						}
						
						$this->updateConfigValue($key, $val);
						fwrite($handle, $this->getConfigKey()."['".$key."'] = '".$val."';\n");
					}
		
					fwrite($handle, "?> \n");
					$this->AppUI->setMsg($this->getConfigFile()." ".$this->AppUI->_('has been successfully updated.'), UI_MSG_OK);
					fclose($handle);
				}
			} 
			else {
				$this->AppUI->setMsg($this->getConfigFile()." ".$this->AppUI->_('is not writable.'), UI_MSG_ERROR);
				return false;
			}
			
			return true;
		}		
		
		public function saveConfigOptions() {
			if (is_writable($this->getConfigFile())) {
				if (!$handle = fopen($this->getConfigFile(), 'w')) {
					$this->AppUI->setMsg($this->getConfigFile()." ".$this->AppUI->_('cannot be opened.'), UI_MSG_ERROR);
					return false;
				}
		
				if (fwrite($handle, "<?php //Do not edit this file by hand, it will be overwritten by the configuration utility. \n") === FALSE) {
					$this->AppUI->setMsg($this->getConfigFile()." ".$this->AppUI->_('cannot be written to.'), UI_MSG_ERROR);
					return false;
				} 
				else {
					$co = $this->getConfigOptions();
					
					foreach ($co as $key => $value){
						if (substr($key, 0, 7) == 'heading') {
							continue;
						}
						
						$val=$value['value'];
						fwrite($handle, $this->getConfigKey()."['".$key."'] = '".$val."';\n");
					}
		
					fwrite($handle, "?> \n");
					$this->AppUI->setMsg($this->getConfigFile()." ".$this->AppUI->_('has been successfully updated.'), UI_MSG_OK);
					fclose($handle);
				}
			} 
			else {
				$this->AppUI->setMsg($this->getConfigFile()." ".$this->AppUI->_('is not writable.'), UI_MSG_ERROR);
				return false;
			}
			
			return true;
		}		
		
		//Read the current config values from the config file and update the array.
		public function loadConfig($config_array) {
			$co = &$this->getConfigOptions();
			
			foreach ($co as $key => $value){
				if(isset($config_array[$key])){
					$co[$key]['value'] = $config_array[$key];
				}
			}
		}
		
		public function updateConfigValue($k, $v) {
			$co = &$this->getConfigOptions();
			
			if(isset($co[$k])){
				$co[$k]['value'] = $v;
			}
		}
		
		public function outputForm() {
			$s  = '<form method="post" accept-charset="utf-8">';
			$s .= '<table class="std">';
			$co = $this->getConfigOptions();
						
			foreach ($co as $key => $value) {
				$s .= '	<tr>';
				
				// the key starts with hr, then just display the value
				if (substr($key, 0, 7) == 'heading') {
		  		$s .= '<th align="center" colspan="2">'.$value.'</th>';
				} 
				else if ($value['type'] == 'auto') {  //meant to be managed in code, not by user
					$s .= '<input type="hidden" name="'.$key.'" value="'.$value['value'].'" />';
		  		continue;
				} 
				else {
					$s .= '		<td align="left">'.$value['description'].'</td>'."\n";
					$s .= '		<td>'."\n";
				
					switch($value['type']) {
						case 'checkbox': 
							$s .= '		<input type="checkbox" name="'.$key.'" '.($value['value'] ? 'checked="checked"' : '""').'/>'."\n";
							break;
						case 'text':
							$s .= '		<input type="text" name="'.$key.'" value="'.$value['value'].'"/>'."\n";
							break;
						case 'longtext':
          		$s .= '		<input type="text" size="70" name="'.$key.'" style="'.$value['style'].'" value="'.$value['value'].'" />'."\n";
							break;
						case 'select': 
							$s .= arraySelect($value["list"], $key, 'class="text" size="1" id="'.$key.'" '.$value["events"], $value["value"] );
							break;
						case 'radio':
							foreach ($value['buttons'] as $v => $n) {
            		$s .= '<label><input type="radio" name="'.$key.'" id="'.$key.'" value="'.$v.'" '.(($value['value'] == $v) ? 'checked="checked"' : '').' '.$value['events'].' /> '.$n.'</label>'."\n";
          		}
							break;
						default:
							break;
					}
					
					if (isset($value['tooltip'])) {
						$s .= w2PtoolTip($value['description'], $value['tooltip'], true) . w2PshowImage('log-info.gif') . w2PendTip();
					}
					
					$s .= '</td>'."\n";
				}
				
				$s .= '</tr>'."\n";
			}
			
			$s .= '<tr>'."\n";
			$s .= '<td colspan="2" align="right">'."\n";
			$s .= '<input type="Submit" name="Cancel" value="'.$this->AppUI->_('Back').'">'."\n";
			$s .= '<input type="Submit" name="Save" value="'.$this->AppUI->_('Save').'">'."\n";
			$s .= '</td>'."\n";
			$s .= '</tr>'."\n";
			$s .= '</table>'."\n";
			$s .= '</form>'."\n";

			echo $s;
		}
	}
?>